name: Generate Monthly Report

on:
  schedule:
    # 매월 28-31일 오후 11시 (UTC)에 실행 후 다음날이 1일인지 체크
    # 1일이면 전월 리포트 생성 (1일 08:00 KST = 전날 23:00 UTC)
    - cron: '0 23 28-31 * *'
  workflow_dispatch:  # 수동 실행 가능
    inputs:
      target_year:
        description: '대상 연도 (예: 2025)'
        required: false
      target_month:
        description: '대상 월 (예: 10)'
        required: false

permissions:
  contents: write

jobs:
  monthly-report:
    runs-on: ubuntu-latest
    
    steps:
      - name: Check if tomorrow is 1st day of month
        id: check_date
        env:
          TZ: Asia/Seoul
        run: |
          # KST 기준 내일 날짜 (UTC+9)
          tomorrow=$(date -d tomorrow '+%d')
          
          if [ "$tomorrow" = "01" ]; then
            echo "is_first_day=true" >> $GITHUB_OUTPUT
            echo "✓ 내일이 1일입니다. 월간 리포트를 생성합니다."
          else
            echo "is_first_day=false" >> $GITHUB_OUTPUT
            echo "✗ 내일이 1일이 아닙니다. 작업을 건너뜁니다."
          fi
      
      - name: Checkout repository
        if: steps.check_date.outputs.is_first_day == 'true' || github.event_name == 'workflow_dispatch'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 전체 히스토리 가져오기
      
      - name: Calculate target month
        if: steps.check_date.outputs.is_first_day == 'true' || github.event_name == 'workflow_dispatch'
        id: calc
        env:
          TZ: Asia/Seoul
        run: |
          if [ -n "${{ github.event.inputs.target_year }}" ] && [ -n "${{ github.event.inputs.target_month }}" ]; then
            # 수동 실행: 입력받은 연월 사용
            year="${{ github.event.inputs.target_year }}"
            month="${{ github.event.inputs.target_month }}"
          else
            # 자동 실행: 전월 계산 (KST 기준)
            # 오늘이 1일이므로 전월을 계산
            current_date=$(date '+%Y-%m-01')
            prev_month=$(date -d "$current_date -1 day" '+%Y %m')
            year=$(echo $prev_month | cut -d' ' -f1)
            month=$(echo $prev_month | cut -d' ' -f2)
          fi
          
          # 앞의 0 제거 (Python에서 사용하기 위해)
          month_num=$((10#$month))
          
          echo "year=${year}" >> $GITHUB_OUTPUT
          echo "month=${month}" >> $GITHUB_OUTPUT
          echo "month_num=${month_num}" >> $GITHUB_OUTPUT
          
          echo "대상 기간: ${year}년 ${month}월"
      
      - name: Generate monthly report
        if: steps.check_date.outputs.is_first_day == 'true' || github.event_name == 'workflow_dispatch'
        id: generate
        env:
          TZ: Asia/Seoul
        run: |
          year="${{ steps.calc.outputs.year }}"
          month="${{ steps.calc.outputs.month }}"
          month_num="${{ steps.calc.outputs.month_num }}"
          
          # 리포트 생성
          export PYTHONPATH="${PYTHONPATH}:${GITHUB_WORKSPACE}"
          python3 scripts/generate_reports.py monthly ${year} ${month_num}
          
          # 생성된 파일 확인
          report_file="output/${year}/${month}/${year}년_${month}월_월간통계.md"
          
          if [ -f "$report_file" ]; then
            echo "report_exists=true" >> $GITHUB_OUTPUT
            echo "report_file=${report_file}" >> $GITHUB_OUTPUT
            echo "✓ 월간 리포트 생성 완료: $report_file"
            
            # 리포트에서 주요 지표 추출
            total_products=$(grep -oP '총 발견 상품:\s*\K\d+' "$report_file" || echo "0")
            avg_per_day=$(grep -oP '일평균 상품 수:\s*\K[\d.]+' "$report_file" || echo "0")
            
            echo "total_products=${total_products}" >> $GITHUB_OUTPUT
            echo "avg_per_day=${avg_per_day}" >> $GITHUB_OUTPUT
          else
            echo "report_exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ 월간 리포트 생성 실패 (데이터 부족 가능성)"
          fi
      
      - name: Display report summary
        if: (steps.check_date.outputs.is_first_day == 'true' || github.event_name == 'workflow_dispatch') && steps.generate.outputs.report_exists == 'true'
        env:
          TZ: Asia/Seoul
        run: |
          report_file="${{ steps.generate.outputs.report_file }}"
          
          echo "=== 월간 리포트 요약 ==="
          if [ -f "$report_file" ]; then
            head -50 "$report_file"
          else
            echo "⚠️ 리포트 파일이 없습니다: $report_file"
          fi
      
      - name: Commit and push monthly report
        if: (steps.check_date.outputs.is_first_day == 'true' || github.event_name == 'workflow_dispatch') && steps.generate.outputs.report_exists == 'true'
        env:
          TZ: Asia/Seoul
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          year="${{ steps.calc.outputs.year }}"
          month="${{ steps.calc.outputs.month }}"
          total="${{ steps.generate.outputs.total_products }}"
          avg="${{ steps.generate.outputs.avg_per_day }}"
          
          # 원격 변경사항 가져오기
          git fetch origin master
          git rebase origin/master || git merge origin/master -m "Merge remote changes"
          
          git add output/${year}/${month}/*월간통계.md
          git add output/${year}/${month}/*월간통계.csv
          
          if git diff --staged --quiet; then
            echo "변경사항이 없습니다."
          else
            kst_date=$(date '+%Y년 %m월 %d일')
            
            commit_msg="📈 월간 리포트 생성: ${year}년 ${month}월

            - 총 발견 상품: ${total}개
            - 일평균: ${avg}개
            - 생성 일시: ${kst_date}
            - 자동 생성: GitHub Actions (Monthly Report)"
            
            git commit -m "$commit_msg"
            
            # Push 재시도
            for i in {1..3}; do
              if git push origin master; then
                echo "✓ 월간 리포트 커밋 완료"
                break
              else
                echo "⚠️ Push 실패, 재시도 $i/3"
                git fetch origin master
                git rebase origin/master || git merge origin/master -m "Merge during retry"
                sleep 3
              fi
            done
          fi
      
      - name: Create summary
        if: (steps.check_date.outputs.is_first_day == 'true' || github.event_name == 'workflow_dispatch') && steps.generate.outputs.report_exists == 'true'
        env:
          TZ: Asia/Seoul
        run: |
          report_file="${{ steps.generate.outputs.report_file }}"
          year="${{ steps.calc.outputs.year }}"
          month="${{ steps.calc.outputs.month }}"
          total="${{ steps.generate.outputs.total_products }}"
          avg="${{ steps.generate.outputs.avg_per_day }}"
          
          echo "# 📈 HACIE 월간 리포트 생성 완료" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**리포트 기간:** ${year}년 ${month}월" >> $GITHUB_STEP_SUMMARY
          echo "**생성 시간:** $(date '+%Y-%m-%d %H:%M:%S') KST" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 주요 지표" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **총 발견 상품:** ${total}개" >> $GITHUB_STEP_SUMMARY
          echo "- **일평균 상품:** ${avg}개" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "$report_file" ]; then
            echo "## 📋 리포트 미리보기" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -60 "$report_file" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Upload report as artifact
        if: (steps.check_date.outputs.is_first_day == 'true' || github.event_name == 'workflow_dispatch') && steps.generate.outputs.report_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: monthly-report-${{ steps.calc.outputs.year }}-${{ steps.calc.outputs.month }}
          path: ${{ steps.generate.outputs.report_file }}
          retention-days: 730  # 2년 보관


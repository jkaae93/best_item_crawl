name: Track HACIE Daily Rankings
on:
  schedule:
    # 매일 오전 8시 (KST = UTC+9, 즉 UTC 23시)
    - cron: '0 23 * * *'
  workflow_dispatch:  # 수동 실행 가능
permissions:
  contents: write
jobs:
  track-rankings:
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright/python:v1.55.0-jammy
    
    env:
      TZ: Asia/Seoul  # 전역 환경변수로 설정
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Cache pip packages
        uses: actions/cache@v4
        id: pip-cache
        with:
          path: /root/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install Python dependencies
        run: |
          pip install --no-cache-dir -r requirements.txt
          python3 -c "import playwright; import requests; print('✅ 패키지 설치 확인 완료')"
      
      - name: Set KST timezone
        shell: bash
        run: |
          export DEBIAN_FRONTEND=noninteractive
          apt-get update -y
          apt-get install -y tzdata
      
          ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime
          echo "Asia/Seoul" > /etc/timezone
      
          echo "현재 시스템 시간: $(date '+%Y-%m-%d %H:%M:%S %Z')"
          python3 - <<'PY'
          from datetime import datetime
          from zoneinfo import ZoneInfo
          print("Python에서 인식하는 시간:", datetime.now(ZoneInfo("Asia/Seoul")).strftime("%Y-%m-%d %H:%M:%S %Z"))
          PY

      
      - name: Run HACIE rankings tracker
        id: track
        shell: bash
        env:
          PYTHONUNBUFFERED: "1"
        run: |
          export PYTHONPATH="${PYTHONPATH}:${GITHUB_WORKSPACE}"
          
          # 출력 디렉토리 생성
          mkdir -p output
          mkdir -p data
          
          # 스크립트 실행 전 날짜 확인
          echo "🕐 실행 시각 (KST): $(date '+%Y-%m-%d %H:%M:%S')"
          
          # 스크립트 실행 (최대 3회 재시도)
          # --skip-category-update 사용하여 빠르게 실행
          max_attempts=3
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "🔄 시도 $attempt/$max_attempts..."
            
            if python3 scripts/wconcept_best_export.py --skip-category-update; then
              echo "✅ 크롤링 성공!"
              exit 0
            else
              exit_code=$?
              echo "⚠️ 시도 $attempt 실패 (exit code: $exit_code)"
              
              if [ $attempt -lt $max_attempts ]; then
                wait_time=$((attempt * 30))
                echo "⏳ ${wait_time}초 대기 후 재시도..."
                sleep $wait_time
              fi
            fi
            
            attempt=$((attempt + 1))
          done
          
          echo "❌ 모든 시도 실패"
          exit 1
        continue-on-error: false
      
      - name: Find generated CSV file
        id: organize
        shell: bash
        run: |
          # Python 스크립트가 KST 기준으로 생성한 날짜 폴더에서 CSV 파일 찾기
          # 폴더 구조: output/YYYY/MM/DD/wconcept_best_yyMMdd_HHMMSS.csv
          
          # 최신 CSV 파일 찾기 (재귀 검색)
          latest_csv=$(find output -name "wconcept_best_*.csv" -type f -printf '%T+ %p\n' 2>/dev/null | sort -r | head -1 | cut -d' ' -f2-)
          
          if [ -n "$latest_csv" ] && [ -f "$latest_csv" ]; then
            echo "📂 발견된 CSV 파일: $latest_csv"
            
            # 파일 경로에서 날짜 정보 추출
            # 예: output/2025/10/22/wconcept_best_251022_090916.csv
            csv_dir=$(dirname "$latest_csv")
            year=$(echo "$csv_dir" | cut -d'/' -f2)
            month=$(echo "$csv_dir" | cut -d'/' -f3)
            day=$(echo "$csv_dir" | cut -d'/' -f4)
            
            # 파일명에서 타임스탬프 추출
            csv_basename=$(basename "$latest_csv")
            # wconcept_best_251022_090916.csv -> 251022_090916
            time_suffix=$(echo "$csv_basename" | sed -E 's/wconcept_best_([0-9]{6}_[0-9]{6})\.csv/\1/')
            
            echo "year=${year}" >> $GITHUB_OUTPUT
            echo "month=${month}" >> $GITHUB_OUTPUT
            echo "day=${day}" >> $GITHUB_OUTPUT
            echo "time_suffix=${time_suffix}" >> $GITHUB_OUTPUT
            echo "file_exists=true" >> $GITHUB_OUTPUT
            echo "csv_file=${latest_csv}" >> $GITHUB_OUTPUT
            echo "csv_name=${csv_basename}" >> $GITHUB_OUTPUT
            
            echo "📅 Python 스크립트가 생성한 날짜: ${year}년 ${month}월 ${day}일"
            echo "⏰ 타임스탬프: ${time_suffix}"
          else
            echo "file_exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ CSV 파일이 생성되지 않았습니다."
          fi
      
      - name: Generate daily summary
        if: steps.organize.outputs.file_exists == 'true'
        shell: bash
        run: |
          csv_file="${{ steps.organize.outputs.csv_file }}"
          year="${{ steps.organize.outputs.year }}"
          month="${{ steps.organize.outputs.month }}"
          day="${{ steps.organize.outputs.day }}"
          time_suffix="${{ steps.organize.outputs.time_suffix }}"
          csv_name="${{ steps.organize.outputs.csv_name }}"
          
          # CSV 파일 존재 확인
          if [ ! -f "$csv_file" ]; then
            echo "❌ CSV 파일을 찾을 수 없습니다: $csv_file"
            exit 1
          fi
          
          echo "📄 분석할 CSV 파일: $csv_file"
          echo "📊 CSV 파일 크기: $(wc -l < "$csv_file") 줄"
          
          # HACIE 상품 개수 계산 (디버깅용)
          hacie_count=$(grep -iE "HACIE|하시에" "$csv_file" 2>/dev/null | wc -l | xargs)
          echo "📊 발견된 HACIE 상품: ${hacie_count}개"
          
          # 마크다운 파일명: 일일_요약_yyMMdd_hhmmss.md (CSV와 동일한 타임스탬프)
          summary_file="output/${year}/${month}/${day}/일일_요약_${time_suffix}.md"
          
          # generate_reports.py를 사용하여 리포트 생성
          echo "📝 generate_reports.py를 사용하여 일일 리포트 생성 중..."
          python3 scripts/generate_reports.py daily "$csv_file" "$summary_file"
          
          if [ $? -eq 0 ]; then
            echo "✅ 일일 요약 생성 완료: $summary_file"
            echo "⏰ 타임스탬프: ${time_suffix}"
            
            # 생성된 마크다운 파일 미리보기
            echo ""
            echo "📄 마크다운 내용 미리보기:"
            head -30 "$summary_file"
            echo ""
            echo "... (중략) ..."
          else
            echo "❌ 일일 리포트 생성 실패"
            exit 1
          fi
      
      - name: Commit and push results
        if: steps.organize.outputs.file_exists == 'true'
        shell: bash
        run: |
          # Git 안전 디렉토리 설정 (container 환경)
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          year="${{ steps.organize.outputs.year }}"
          month="${{ steps.organize.outputs.month }}"
          day="${{ steps.organize.outputs.day }}"
          time_suffix="${{ steps.organize.outputs.time_suffix }}"
          csv_file="${{ steps.organize.outputs.csv_file }}"
          
          # 원격 변경사항 가져오기 (충돌 방지)
          git fetch origin master
          git rebase origin/master || {
            echo "⚠️ rebase 충돌 발생, merge로 전환"
            git rebase --abort
            git merge origin/master -m "Merge remote changes" || {
              echo "❌ merge 실패, 변경사항 확인 필요"
              exit 1
            }
          }
          
          # 모든 파일 추가
          git add output/${year}/${month}/${day}/
          
          if git diff --staged --quiet; then
            echo "변경사항이 없습니다."
          else
            # HACIE 상품 수 계산
            hacie_count=$(grep -iE "HACIE|하시에" "$csv_file" 2>/dev/null | wc -l | xargs)
            
            kst_time=$(date '+%Y년 %m월 %d일 %H:%M:%S')
            
            # time_suffix에서 시간 추출 (yyMMdd_HHMMSS -> HH:MM:SS)
            time_part=$(echo "$time_suffix" | cut -d'_' -f2)
            formatted_time="${time_part:0:2}:${time_part:2:2}:${time_part:4:2}"
            
            commit_msg="📊 HACIE 일일 순위 추적 (${year}.${month}.${day} ${formatted_time})

          - 발견 상품: ${hacie_count}개
          - 분석 시각: ${kst_time}
          - 파일: output/${year}/${month}/${day}/

          자동 생성 by GitHub Actions"
            
            git commit -m "$commit_msg"
            
            # Push 재시도 로직
            max_push_attempts=3
            push_attempt=1
            
            while [ $push_attempt -le $max_push_attempts ]; do
              echo "🔄 Push 시도 $push_attempt/$max_push_attempts..."
              
              if git push origin master; then
                echo "✅ 커밋 완료: ${hacie_count}개 상품"
                exit 0
              else
                echo "⚠️ Push 실패, 원격 변경사항 다시 가져오기..."
                git fetch origin master
                git rebase origin/master || {
                  git rebase --abort
                  git merge origin/master -m "Merge remote changes during push retry"
                }
                
                push_attempt=$((push_attempt + 1))
                
                if [ $push_attempt -le $max_push_attempts ]; then
                  sleep 5
                fi
              fi
            done
            
            echo "❌ Push 최종 실패"
            exit 1
          fi
      
      - name: Create summary
        if: steps.organize.outputs.file_exists == 'true'
        shell: bash
        run: |
          csv_file="${{ steps.organize.outputs.csv_file }}"
          year="${{ steps.organize.outputs.year }}"
          month="${{ steps.organize.outputs.month }}"
          day="${{ steps.organize.outputs.day }}"
          time_suffix="${{ steps.organize.outputs.time_suffix }}"
          
          hacie_count=$(grep -iE "HACIE|하시에" "$csv_file" 2>/dev/null | wc -l | xargs)
          
          # time_suffix에서 시간 추출 (yyMMdd_HHMMSS -> HH:MM:SS)
          time_part=$(echo "$time_suffix" | cut -d'_' -f2)
          formatted_time="${time_part:0:2}:${time_part:2:2}:${time_part:4:2}"
          
          echo "# 🏆 HACIE 일일 순위 추적 결과" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**날짜:** ${year}년 ${month}월 ${day}일" >> $GITHUB_STEP_SUMMARY
          echo "**시각:** ${formatted_time} KST" >> $GITHUB_STEP_SUMMARY
          echo "**발견된 HACIE 상품:** ${hacie_count}개" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ $hacie_count -gt 0 ]; then
            echo "## 📋 상위 10개 상품" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '| 순위 | 카테고리 | 상품명 | 가격 |' >> $GITHUB_STEP_SUMMARY
            echo '|:----:|---------|--------|-----:|' >> $GITHUB_STEP_SUMMARY
            
            grep -iE "HACIE|하시에" "$csv_file" 2>/dev/null | head -10 | while IFS=',' read -r date time depth1 depth2 rank name price rest; do
              name_clean=$(echo "$name" | sed 's/"//g' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
              price_clean=$(echo "$price" | sed 's/"//g' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
              rank_clean=$(echo "$rank" | sed 's/"//g' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
              depth2_clean=$(echo "$depth2" | sed 's/"//g' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
              
              if [ ${#name_clean} -gt 40 ]; then
                name_clean="${name_clean:0:40}..."
              fi
              
              echo "| ${rank_clean} | ${depth2_clean} | ${name_clean} | ${price_clean} |" >> $GITHUB_STEP_SUMMARY
            done
          fi
      
      - name: Upload results as artifact
        if: steps.organize.outputs.file_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: daily-rankings-${{ steps.organize.outputs.year }}${{ steps.organize.outputs.month }}${{ steps.organize.outputs.day }}
          path: output/${{ steps.organize.outputs.year }}/${{ steps.organize.outputs.month }}/${{ steps.organize.outputs.day }}/
          retention-days: 90
      
      - name: Send Slack notification
        if: steps.organize.outputs.file_exists == 'true'
        shell: bash
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          csv_file="${{ steps.organize.outputs.csv_file }}"
          year="${{ steps.organize.outputs.year }}"
          month="${{ steps.organize.outputs.month }}"
          day="${{ steps.organize.outputs.day }}"
          time_suffix="${{ steps.organize.outputs.time_suffix }}"
          csv_name="${{ steps.organize.outputs.csv_name }}"
          
          # HACIE 상품 수 계산
          hacie_count=$(grep -iE "HACIE|하시에" "$csv_file" 2>/dev/null | wc -l | xargs)
          
          # 현재 시각
          kst_time=$(date '+%Y년 %m월 %d일 %H:%M:%S')
          
          # 상위 5개 상품 추출 (Slack 메시지용)
          top5_text=""
          if [ $hacie_count -gt 0 ]; then
            top5_text=$(python3 -c "
          import csv
          csv_file = '${csv_file}'
          items = []
          try:
              with open(csv_file, 'r', encoding='utf-8') as f:
                  reader = csv.reader(f)
                  header = next(reader)
                  count = 0
                  for row in reader:
                      if len(row) < 7:
                          continue
                      product_name = row[5] if len(row) > 5 else ''
                      if 'hacie' not in product_name.lower() and '하시에' not in product_name:
                          continue
                      rank = row[4] if len(row) > 4 else '-'
                      category = row[3] if len(row) > 3 else '-'
                      if len(product_name) > 40:
                          product_name = product_name[:40] + '...'
                      items.append(f'{rank}위. {product_name} ({category})')
                      count += 1
                      if count >= 5:
                          break
              print('\n'.join(items))
          except Exception as e:
              print('데이터 추출 오류')
          ")
          fi
          
          # Repository URL
          repo_url="https://github.com/${GITHUB_REPOSITORY}"
          file_path="output/${year}/${month}/${day}"
          file_url="${repo_url}/tree/master/${file_path}"
          
          # Slack 메시지 생성
          if [ $hacie_count -gt 0 ]; then
            status_emoji="✅"
            status_color="good"
            summary_text="HACIE 상품 *${hacie_count}개* 발견!"
          else
            status_emoji="⚠️"
            status_color="warning"
            summary_text="HACIE 상품이 발견되지 않았습니다."
          fi
          
          # JSON payload 생성
          payload=$(cat <<EOF
          {
            "text": "${status_emoji} HACIE 일일 순위 추적 완료",
            "attachments": [
              {
                "color": "${status_color}",
                "title": "📊 ${year}년 ${month}월 ${day}일 순위 분석",
                "title_link": "${file_url}",
                "fields": [
                  {
                    "title": "발견 상품",
                    "value": "${hacie_count}개",
                    "short": true
                  },
                  {
                    "title": "분석 시각",
                    "value": "${kst_time} KST",
                    "short": true
                  },
                  {
                    "title": "데이터 파일",
                    "value": "\`${csv_name}\`",
                    "short": false
                  }
                ],
                "footer": "GitHub Actions",
                "footer_icon": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                "ts": $(date +%s)
              }
            ]
          }
          EOF
          )
          
          # 상위 5개 상품이 있으면 추가
          if [ ! -z "$top5_text" ]; then
            payload=$(cat <<EOF
          {
            "text": "${status_emoji} HACIE 일일 순위 추적 완료",
            "attachments": [
              {
                "color": "${status_color}",
                "title": "📊 ${year}년 ${month}월 ${day}일 순위 분석",
                "title_link": "${file_url}",
                "fields": [
                  {
                    "title": "발견 상품",
                    "value": "${hacie_count}개",
                    "short": true
                  },
                  {
                    "title": "분석 시각",
                    "value": "${kst_time} KST",
                    "short": true
                  },
                  {
                    "title": "데이터 파일",
                    "value": "\`${csv_name}\`",
                    "short": false
                  },
                  {
                    "title": "🏆 상위 5개 상품",
                    "value": "${top5_text}",
                    "short": false
                  }
                ],
                "footer": "GitHub Actions",
                "footer_icon": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                "ts": $(date +%s)
              }
            ]
          }
          EOF
          )
          fi
          
          # Slack 웹훅 전송
          echo "📤 Slack 알림 전송 중..."
          response=$(curl -X POST \
            -H 'Content-type: application/json' \
            --data "$payload" \
            -w "\n%{http_code}" \
            -s \
            "$SLACK_WEBHOOK_URL")
          
          http_code=$(echo "$response" | tail -n 1)
          
          if [ "$http_code" = "200" ]; then
            echo "✅ Slack 알림 전송 성공!"
          else
            echo "⚠️ Slack 알림 전송 실패 (HTTP ${http_code})"
            echo "Response: $(echo "$response" | head -n -1)"
          fi
